<?php

namespace App\Models {

	/**
	 * App\Models\Comment
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string $body
	 * @property int $user_id
	 * @property int $post_id
	 * @property int $id
	 * @property-read \App\Models\User $user
	 * @property-read \App\Models\Post $post
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment wherePostId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereUserId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereBody($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Comment|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Comment|null first(array|string $columns)
	 * @method static Comment firstOrFail(array|string $columns, string|null $message)
	 * @method static Comment sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Comment extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\FollowRequest
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string $status
	 * @property int $receiver_id
	 * @property int $sender_id
	 * @property int $id
	 * @property-read \App\Models\User $sender
	 * @property-read \App\Models\User $receiver
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereSenderId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereReceiverId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereStatus($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest query()
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static FollowRequest|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static FollowRequest|null first(array|string $columns)
	 * @method static FollowRequest firstOrFail(array|string $columns, string|null $message)
	 * @method static FollowRequest sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<FollowRequest>|FollowRequest tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class FollowRequest extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Like
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property int $post_id
	 * @property int $user_id
	 * @property int $id
	 * @property-read \App\Models\User $user
	 * @property-read \App\Models\Post $post
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereUserId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like wherePostId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Like|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Like|null first(array|string $columns)
	 * @method static Like firstOrFail(array|string $columns, string|null $message)
	 * @method static Like sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Like>|Like tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Like extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Notification
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property bool $read
	 * @property int|null $post_id
	 * @property string $type
	 * @property int $sender_id
	 * @property int $user_id
	 * @property int $id
	 * @property-read \App\Models\User $user
	 * @property-read \App\Models\User $sender
	 * @property-read \App\Models\Post $post
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereUserId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereSenderId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereType($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification wherePostId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereRead($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Notification|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Notification|null first(array|string $columns)
	 * @method static Notification firstOrFail(array|string $columns, string|null $message)
	 * @method static Notification sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Notification>|Notification tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Notification extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Post
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string|null $video
	 * @property string|null $image
	 * @property string $content
	 * @property int $likes_count
	 * @property int $user_id
	 * @property int $id
	 * @property-read \App\Models\User $user
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Like> $likes
	 * @property-read int|null $likes_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Comment> $comments
	 * @property-read int|null $comments_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\User> $likedByUsers
	 * @property-read int|null $likedByUsers_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereUserId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereLikesCount($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereContent($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereImage($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereVideo($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Post|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Post|null first(array|string $columns)
	 * @method static Post firstOrFail(array|string $columns, string|null $message)
	 * @method static Post sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Post>|Post tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Post extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\UserCoverPhoto
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string $photo_path
	 * @property int $user_id
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereUserId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto wherePhotoPath($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto query()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static UserCoverPhoto|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static UserCoverPhoto|null first(array|string $columns)
	 * @method static UserCoverPhoto firstOrFail(array|string $columns, string|null $message)
	 * @method static UserCoverPhoto sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserCoverPhoto>|UserCoverPhoto tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class UserCoverPhoto extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\UserLevel
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property array $permissions
	 * @property int $min_points
	 * @property int $level
	 * @property int $user_id
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereUserId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereLevel($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereMinPoints($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel wherePermissions($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel query()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static UserLevel|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static UserLevel|null first(array|string $columns)
	 * @method static UserLevel firstOrFail(array|string $columns, string|null $message)
	 * @method static UserLevel sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserLevel>|UserLevel tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class UserLevel extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\UserPhoto
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string $photo_path
	 * @property int $user_id
	 * @property int $id
	 * @property-read \App\Models\User $user
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereUserId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto wherePhotoPath($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto query()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static UserPhoto|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static UserPhoto|null first(array|string $columns)
	 * @method static UserPhoto firstOrFail(array|string $columns, string|null $message)
	 * @method static UserPhoto sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPhoto>|UserPhoto tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class UserPhoto extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\UserPoint
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property int $points
	 * @property int $user_id
	 * @property int $id
	 * @property-read \App\Models\User $user
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereUserId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint wherePoints($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint query()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static UserPoint|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static UserPoint|null first(array|string $columns)
	 * @method static UserPoint firstOrFail(array|string $columns, string|null $message)
	 * @method static UserPoint sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserPoint>|UserPoint tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class UserPoint extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

}